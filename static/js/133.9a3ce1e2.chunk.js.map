{"version":3,"file":"static/js/133.9a3ce1e2.chunk.js","mappings":"ofAeMA,GAAWC,EAAAA,EAAAA,OAAK,SAACC,G,YACXC,EAAiGD,EAAjGC,UAAWC,EAAsFF,EAAtFE,KAAI,EAAkFF,EAAhFG,6BAAAA,OAA4B,IAAG,GAAI,IAA6CH,EAA3CI,SAAAA,OAAQ,IAAG,EAAAC,EAAAA,EAAe,EAAKC,EAAO,EAAKN,EAAnG,gEAEEO,EAAkGN,EAAlGM,IAAKC,EAA6FP,EAA7FO,iBAAkBC,EAA2ER,EAA3EQ,SAAUC,EAAiET,EAAjES,MAAOC,EAA0DV,EAA1DU,iBAAkBC,EAAwCX,EAAxCW,kBAAmBC,EAAqBZ,EAArBY,iBAE7EC,EAAgBZ,EAAhBY,IAAKC,EAAWb,EAAXa,OAEb,OACIC,EAAAA,cAACZ,EAAQ,gCACCH,UAAAA,EAAWC,KAAAA,EAAMC,6BAAAA,GAAiCG,GAAO,CAC/DW,WAAYH,EAAI,iBAChBI,SACIF,EAAAA,cAAAA,OAAAA,CAAMG,GAAG,mBAAmBC,WAAWC,EAAAA,EAAAA,GAAKf,EAAQgB,aAAcC,OAAQhB,EAAIiB,mBAAoBC,OAAO,QACrGT,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQoB,iBAAkBlB,EAAiBmB,cAAc,YAAarB,EAAQsB,yBAC/FZ,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQuB,sBACzBb,EAAAA,cAAAA,QAAAA,CAAOc,QAAQ,YAAYV,WAAWC,EAAAA,EAAAA,GAAKf,EAAQyB,eAC9CjB,EAAI,eAGbE,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ0B,sBACzBhB,EAAAA,cAAAA,QAAAA,CACIiB,KAAK,OACLd,GAAG,YACHC,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ4B,cACxBC,KAAK,YACLC,aAAyC,QAA3B,EAAA3B,EAAS4B,SAASC,iBAAS,QAAI,OAKzDtB,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQoB,iBAAkBlB,EAAiBmB,cAAc,WAAYrB,EAAQsB,yBAC9FZ,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQuB,sBACzBb,EAAAA,cAAAA,QAAAA,CAAOc,QAAQ,WAAWV,WAAWC,EAAAA,EAAAA,GAAKf,EAAQyB,eAC7CjB,EAAI,cAGbE,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ0B,sBACzBhB,EAAAA,cAAAA,QAAAA,CACIiB,KAAK,OACLd,GAAG,WACHC,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ4B,cACxBC,KAAK,WACLC,aAAwC,QAA1B,EAAA3B,EAAS4B,SAASE,gBAAQ,QAAI,OAKxDvB,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQoB,iBAAkBlB,EAAiBmB,cAAc,QAASrB,EAAQsB,yBAC3FZ,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQuB,sBACzBb,EAAAA,cAAAA,QAAAA,CAAOc,QAAQ,QAAQV,WAAWC,EAAAA,EAAAA,GAAKf,EAAQyB,eAC1CjB,EAAI,WAGbE,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ0B,sBACzBhB,EAAAA,cAAAA,QAAAA,CACIiB,KAAK,OACLd,GAAG,QACHC,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ4B,cACxBC,KAAK,QACLC,aAAqC,QAAvB,EAAA3B,EAAS4B,SAASG,aAAK,QAAI,GACzCC,aAAa,aAIvB/B,EAAMgC,6BACJ1B,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQoB,iBAAkBlB,EAAiBmB,cAAc,WAAYrB,EAAQsB,yBAC9FZ,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQuB,sBACzBb,EAAAA,cAAAA,QAAAA,CAAOc,QAAQ,WAAWV,WAAWC,EAAAA,EAAAA,GAAKf,EAAQyB,eAC7CjB,EAAI,cAGbE,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ0B,sBACzBhB,EAAAA,cAAAA,QAAAA,CACIiB,KAAK,OACLd,GAAG,WACHC,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ4B,cACxBC,KAAK,WACLC,aAAwC,QAA1B,EAAA3B,EAAS4B,SAASM,gBAAQ,QAAI,GAC5CF,aAAa,eAK5B9B,GACGK,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAAAA,MAAAA,CACII,WAAWC,EAAAA,EAAAA,GAAKf,EAAQoB,iBAAkBlB,EAAiBmB,cAAc,WAAYrB,EAAQsB,yBAE7FZ,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQuB,sBACzBb,EAAAA,cAAAA,QAAAA,CAAOc,QAAQ,WAAWV,WAAWC,EAAAA,EAAAA,GAAKf,EAAQyB,eAC7CjB,EAAI,cAGbE,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ0B,sBACzBhB,EAAAA,cAAAA,QAAAA,CACIiB,KAAK,WACLd,GAAG,WACHC,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ4B,cACxBC,KAAK,WACLM,aAAa,mBAKzBzB,EAAAA,cAAAA,MAAAA,CACII,WAAWC,EAAAA,EAAAA,GACPf,EAAQoB,iBACRlB,EAAiBmB,cAAc,mBAAoBrB,EAAQsB,yBAG/DZ,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQuB,sBACzBb,EAAAA,cAAAA,QAAAA,CAAOc,QAAQ,mBAAmBV,WAAWC,EAAAA,EAAAA,GAAKf,EAAQyB,eACrDjB,EAAI,qBAGbE,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ0B,sBACzBhB,EAAAA,cAAAA,QAAAA,CAAOiB,KAAK,WAAWd,GAAG,mBAAmBC,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ4B,cAAeC,KAAK,wBAKxGvB,GACGI,EAAAA,cAAAA,MAAAA,CAAKI,UAAU,cACXJ,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ0B,sBACzBhB,EAAAA,cAAAA,MAAAA,CAAKI,UAAU,cAAa,YAAW,UAAS,eAAeP,MAI3EG,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQoB,mBACzBV,EAAAA,cAAAA,MAAAA,CAAKG,GAAG,kBAAkBC,WAAWC,EAAAA,EAAAA,GAAKf,EAAQsC,qBAC9C5B,EAAAA,cAAAA,MAAAA,CAAKI,WAAWC,EAAAA,EAAAA,GAAKf,EAAQuC,4BACzB7B,EAAAA,cAAAA,OAAAA,KACIA,EAAAA,cAAAA,IAAAA,CAAG8B,KAAMvC,EAAIwC,UAAWjC,EAAI,mBAKxCE,EAAAA,cAAAA,MAAAA,CAAKG,GAAG,kBAAkBC,WAAWC,EAAAA,EAAAA,GAAKf,EAAQ0C,qBAC9ChC,EAAAA,cAAAA,QAAAA,CACII,WAAWC,EAAAA,EAAAA,GACPf,EAAQ2C,cACR3C,EAAQ4C,qBACR5C,EAAQ6C,mBACR7C,EAAQ8C,oBAEZnB,KAAK,SACLoB,MAAOtC,EAAO,qBAQ9C,IAEA,W","sources":["../node_modules/keycloakify/src/lib/components/Register.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { clsx } from \"../tools/clsx\";\nimport type { I18n } from \"../i18n\";\n\nexport type RegisterProps = KcProps & {\n    kcContext: KcContextBase.Register;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst Register = memo((props: RegisterProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { url, messagesPerField, register, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={clsx(kcProps.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <div className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"firstName\", kcProps.kcFormGroupErrorClass))}>\n                        <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                            <label htmlFor=\"firstName\" className={clsx(kcProps.kcLabelClass)}>\n                                {msg(\"firstName\")}\n                            </label>\n                        </div>\n                        <div className={clsx(kcProps.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"firstName\"\n                                className={clsx(kcProps.kcInputClass)}\n                                name=\"firstName\"\n                                defaultValue={register.formData.firstName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"lastName\", kcProps.kcFormGroupErrorClass))}>\n                        <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                            <label htmlFor=\"lastName\" className={clsx(kcProps.kcLabelClass)}>\n                                {msg(\"lastName\")}\n                            </label>\n                        </div>\n                        <div className={clsx(kcProps.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"lastName\"\n                                className={clsx(kcProps.kcInputClass)}\n                                name=\"lastName\"\n                                defaultValue={register.formData.lastName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"email\", kcProps.kcFormGroupErrorClass))}>\n                        <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                            <label htmlFor=\"email\" className={clsx(kcProps.kcLabelClass)}>\n                                {msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={clsx(kcProps.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"email\"\n                                className={clsx(kcProps.kcInputClass)}\n                                name=\"email\"\n                                defaultValue={register.formData.email ?? \"\"}\n                                autoComplete=\"email\"\n                            />\n                        </div>\n                    </div>\n                    {!realm.registrationEmailAsUsername && (\n                        <div className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"username\", kcProps.kcFormGroupErrorClass))}>\n                            <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                                <label htmlFor=\"username\" className={clsx(kcProps.kcLabelClass)}>\n                                    {msg(\"username\")}\n                                </label>\n                            </div>\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    className={clsx(kcProps.kcInputClass)}\n                                    name=\"username\"\n                                    defaultValue={register.formData.username ?? \"\"}\n                                    autoComplete=\"username\"\n                                />\n                            </div>\n                        </div>\n                    )}\n                    {passwordRequired && (\n                        <>\n                            <div\n                                className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"password\", kcProps.kcFormGroupErrorClass))}\n                            >\n                                <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password\" className={clsx(kcProps.kcLabelClass)}>\n                                        {msg(\"password\")}\n                                    </label>\n                                </div>\n                                <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                    <input\n                                        type=\"password\"\n                                        id=\"password\"\n                                        className={clsx(kcProps.kcInputClass)}\n                                        name=\"password\"\n                                        autoComplete=\"new-password\"\n                                    />\n                                </div>\n                            </div>\n\n                            <div\n                                className={clsx(\n                                    kcProps.kcFormGroupClass,\n                                    messagesPerField.printIfExists(\"password-confirm\", kcProps.kcFormGroupErrorClass)\n                                )}\n                            >\n                                <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password-confirm\" className={clsx(kcProps.kcLabelClass)}>\n                                        {msg(\"passwordConfirm\")}\n                                    </label>\n                                </div>\n                                <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                    <input type=\"password\" id=\"password-confirm\" className={clsx(kcProps.kcInputClass)} name=\"password-confirm\" />\n                                </div>\n                            </div>\n                        </>\n                    )}\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\n                            </div>\n                        </div>\n                    )}\n                    <div className={clsx(kcProps.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={clsx(kcProps.kcFormOptionsClass)}>\n                            <div className={clsx(kcProps.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormButtonsClass)}>\n                            <input\n                                className={clsx(\n                                    kcProps.kcButtonClass,\n                                    kcProps.kcButtonPrimaryClass,\n                                    kcProps.kcButtonBlockClass,\n                                    kcProps.kcButtonLargeClass\n                                )}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default Register;\n"],"names":["Register","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","React","headerNode","formNode","id","className","clsx","kcFormClass","action","registrationAction","method","kcFormGroupClass","printIfExists","kcFormGroupErrorClass","kcLabelWrapperClass","htmlFor","kcLabelClass","kcInputWrapperClass","type","kcInputClass","name","defaultValue","formData","firstName","lastName","email","autoComplete","registrationEmailAsUsername","username","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value"],"sourceRoot":""}