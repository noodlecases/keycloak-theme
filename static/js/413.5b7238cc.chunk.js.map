{"version":3,"file":"static/js/413.5b7238cc.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/RegisterUserProfile.tsx","../node_modules/keycloakify/src/lib/components/shared/UserProfileCommons.tsx"],"sourcesContent":["import React, { memo, useState } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { clsx } from \"../tools/clsx\";\nimport type { I18n } from \"../i18n\";\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\n\nexport type RegisterUserProfileProps = KcProps & {\n    kcContext: KcContextBase.RegisterUserProfile;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst RegisterUserProfile = memo((props: RegisterUserProfileProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields={true}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={clsx(kcProps.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...kcProps} />\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\n                            </div>\n                        </div>\n                    )}\n                    <div className={clsx(kcProps.kcFormGroupClass)} style={{ \"marginBottom\": 30 }}>\n                        <div id=\"kc-form-options\" className={clsx(kcProps.kcFormOptionsClass)}>\n                            <div className={clsx(kcProps.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormButtonsClass)}>\n                            <input\n                                className={clsx(\n                                    kcProps.kcButtonClass,\n                                    kcProps.kcButtonPrimaryClass,\n                                    kcProps.kcButtonBlockClass,\n                                    kcProps.kcButtonLargeClass\n                                )}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                                disabled={!isFomSubmittable}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default RegisterUserProfile;\n","import React, { memo, useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { clsx } from \"../../tools/clsx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18n } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    i18n: I18n;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport const UserProfileFormFields = memo(\n    ({ kcContext, onIsFormSubmittableValueChange, i18n, BeforeField, AfterField, ...props }: UserProfileFormFieldsProps) => {\n        const { advancedMsg } = i18n;\n\n        const {\n            formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n            formValidationReducer,\n            attributesWithPassword\n        } = useFormValidationSlice({\n            kcContext,\n            i18n\n        });\n\n        useEffect(() => {\n            onIsFormSubmittableValueChange(isFormSubmittable);\n        }, [isFormSubmittable]);\n\n        const onChangeFactory = useCallbackFactory(\n            (\n                [name]: [string],\n                [\n                    {\n                        target: { value }\n                    }\n                ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n            ) =>\n                formValidationReducer({\n                    \"action\": \"update value\",\n                    name,\n                    \"newValue\": value\n                })\n        );\n\n        const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n            formValidationReducer({\n                \"action\": \"focus lost\",\n                name\n            })\n        );\n\n        let currentGroup = \"\";\n\n        return (\n            <>\n                {attributesWithPassword.map((attribute, i) => {\n                    const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                    const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                    const formGroupClassName = clsx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                    return (\n                        <Fragment key={i}>\n                            {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                                <div className={formGroupClassName}>\n                                    <div className={clsx(props.kcContentWrapperClass)}>\n                                        <label id={`header-${group}`} className={clsx(props.kcFormGroupHeader)}>\n                                            {advancedMsg(groupDisplayHeader) || currentGroup}\n                                        </label>\n                                    </div>\n                                    {groupDisplayDescription !== \"\" && (\n                                        <div className={clsx(props.kcLabelWrapperClass)}>\n                                            <label id={`description-${group}`} className={`${clsx(props.kcLabelClass)}`}>\n                                                {advancedMsg(groupDisplayDescription)}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {BeforeField && <BeforeField attribute={attribute} />}\n\n                            <div className={formGroupClassName}>\n                                <div className={clsx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor={attribute.name} className={clsx(props.kcLabelClass)}>\n                                        {advancedMsg(attribute.displayName ?? \"\")}\n                                    </label>\n                                    {attribute.required && <>*</>}\n                                </div>\n                                <div className={clsx(props.kcInputWrapperClass)}>\n                                    {(() => {\n                                        const { options } = attribute.validators;\n\n                                        if (options !== undefined) {\n                                            return (\n                                                <select\n                                                    id={attribute.name}\n                                                    name={attribute.name}\n                                                    onChange={onChangeFactory(attribute.name)}\n                                                    onBlur={onBlurFactory(attribute.name)}\n                                                    value={value}\n                                                >\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            );\n                                        }\n\n                                        return (\n                                            <input\n                                                type={(() => {\n                                                    switch (attribute.name) {\n                                                        case \"password-confirm\":\n                                                        case \"password\":\n                                                            return \"password\";\n                                                        default:\n                                                            return \"text\";\n                                                    }\n                                                })()}\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                value={value}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                className={clsx(props.kcInputClass)}\n                                                aria-invalid={displayableErrors.length !== 0}\n                                                disabled={attribute.readOnly}\n                                                autoComplete={attribute.autocomplete}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                            />\n                                        );\n                                    })()}\n                                    {displayableErrors.length !== 0 &&\n                                        (() => {\n                                            const divId = `input-error-${attribute.name}`;\n\n                                            return (\n                                                <>\n                                                    <style>{`#${divId} > span: { display: block; }`}</style>\n                                                    <span\n                                                        id={divId}\n                                                        className={clsx(props.kcInputErrorMessageClass)}\n                                                        style={{\n                                                            \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                        }}\n                                                        aria-live=\"polite\"\n                                                    >\n                                                        {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                    </span>\n                                                </>\n                                            );\n                                        })()}\n                                </div>\n                            </div>\n\n                            {AfterField && <AfterField attribute={attribute} />}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n);\n"],"names":["RegisterUserProfile","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msg","msgStr","useState","isFomSubmittable","setIsFomSubmittable","React","displayMessage","exists","displayRequiredFields","headerNode","formNode","id","className","clsx","kcFormClass","action","registrationAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","kcInputWrapperClass","kcFormGroupClass","style","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","type","value","disabled","_a","BeforeField","AfterField","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","useEffect","onChangeFactory","useCallbackFactory","name","target","onBlurFactory","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","kcFormGroupErrorClass","Fragment","key","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","options","validators","undefined","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","divId","kcInputErrorMessageClass","errorMessage"],"sourceRoot":""}