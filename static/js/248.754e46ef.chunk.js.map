{"version":3,"file":"static/js/248.754e46ef.chunk.js","mappings":"qfAeMA,GAAqBC,EAAAA,EAAAA,OAAK,SAACC,GAC7B,IAAQC,EAAiGD,EAAjGC,UAAWC,EAAsFF,EAAtFE,KAAI,EAAkFF,EAAhFG,6BAAAA,OAA4B,IAAG,GAAI,IAA6CH,EAA3CI,SAAAA,OAAQ,IAAG,EAAAC,EAAAA,EAAe,EAAKC,EAAO,EAAKN,EAAnG,gEAEEO,EAAqBN,EAArBM,IAAKC,EAAgBP,EAAhBO,MAAOC,EAASR,EAATQ,KAEZC,EAAgBR,EAAhBQ,IAAKC,EAAWT,EAAXS,OAEb,OACIC,EAAAA,cAACR,EAAQ,gCACCH,UAAAA,EAAWC,KAAAA,EAAMC,6BAAAA,GAAiCG,GAAO,CAC/DO,gBAAgB,EAChBC,WAAYJ,EAAI,oBAChBK,SACIH,EAAAA,cAAAA,OAAAA,CAAMI,GAAG,yBAAyBC,WAAWC,EAAAA,EAAAA,GAAKZ,EAAQa,aAAcC,OAAQb,EAAIc,YAAaC,OAAO,QACpGV,EAAAA,cAAAA,MAAAA,CAAKK,WAAWC,EAAAA,EAAAA,GAAKZ,EAAQiB,mBACzBX,EAAAA,cAAAA,MAAAA,CAAKK,WAAWC,EAAAA,EAAAA,GAAKZ,EAAQkB,sBACzBZ,EAAAA,cAAAA,QAAAA,CAAOa,QAAQ,WAAWR,WAAWC,EAAAA,EAAAA,GAAKZ,EAAQoB,eAC5ClB,EAAMmB,sBAEDnB,EAAMoB,4BAEPlB,EAAI,SADJA,EAAI,mBAFJA,EAAI,cAMlBE,EAAAA,cAAAA,MAAAA,CAAKK,WAAWC,EAAAA,EAAAA,GAAKZ,EAAQuB,sBACzBjB,EAAAA,cAAAA,QAAAA,CACIkB,KAAK,OACLd,GAAG,WACHe,KAAK,WACLd,WAAWC,EAAAA,EAAAA,GAAKZ,EAAQ0B,cACxBC,WAAS,EACTC,kBAAuBC,IAAT1B,GAAsBA,EAAK2B,aAAe3B,EAAK4B,uBAAoBF,MAI7FvB,EAAAA,cAAAA,MAAAA,CAAKK,WAAWC,EAAAA,EAAAA,GAAKZ,EAAQiB,iBAAkBjB,EAAQgC,qBACnD1B,EAAAA,cAAAA,MAAAA,CAAKI,GAAG,kBAAkBC,WAAWC,EAAAA,EAAAA,GAAKZ,EAAQiC,qBAC9C3B,EAAAA,cAAAA,MAAAA,CAAKK,WAAWC,EAAAA,EAAAA,GAAKZ,EAAQkC,4BACzB5B,EAAAA,cAAAA,OAAAA,KACIA,EAAAA,cAAAA,IAAAA,CAAG6B,KAAMlC,EAAImC,UAAWhC,EAAI,mBAKxCE,EAAAA,cAAAA,MAAAA,CAAKI,GAAG,kBAAkBC,WAAWC,EAAAA,EAAAA,GAAKZ,EAAQqC,qBAC9C/B,EAAAA,cAAAA,QAAAA,CACIK,WAAWC,EAAAA,EAAAA,GACPZ,EAAQsC,cACRtC,EAAQuC,qBACRvC,EAAQwC,mBACRxC,EAAQyC,oBAEZjB,KAAK,SACLkB,MAAOrC,EAAO,iBAMlCsC,SAAUvC,EAAI,sBAG1B,IAEA,W","sources":["../node_modules/keycloakify/src/lib/components/LoginResetPassword.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { clsx } from \"../tools/clsx\";\nimport type { I18n } from \"../i18n\";\n\nexport type LoginResetPasswordProps = KcProps & {\n    kcContext: KcContextBase.LoginResetPassword;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst LoginResetPassword = memo((props: LoginResetPasswordProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { url, realm, auth } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            displayMessage={false}\n            headerNode={msg(\"emailForgotTitle\")}\n            formNode={\n                <form id=\"kc-reset-password-form\" className={clsx(kcProps.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <div className={clsx(kcProps.kcFormGroupClass)}>\n                        <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                            <label htmlFor=\"username\" className={clsx(kcProps.kcLabelClass)}>\n                                {!realm.loginWithEmailAllowed\n                                    ? msg(\"username\")\n                                    : !realm.registrationEmailAsUsername\n                                    ? msg(\"usernameOrEmail\")\n                                    : msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={clsx(kcProps.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"username\"\n                                name=\"username\"\n                                className={clsx(kcProps.kcInputClass)}\n                                autoFocus\n                                defaultValue={auth !== undefined && auth.showUsername ? auth.attemptedUsername : undefined}\n                            />\n                        </div>\n                    </div>\n                    <div className={clsx(kcProps.kcFormGroupClass, kcProps.kcFormSettingClass)}>\n                        <div id=\"kc-form-options\" className={clsx(kcProps.kcFormOptionsClass)}>\n                            <div className={clsx(kcProps.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormButtonsClass)}>\n                            <input\n                                className={clsx(\n                                    kcProps.kcButtonClass,\n                                    kcProps.kcButtonPrimaryClass,\n                                    kcProps.kcButtonBlockClass,\n                                    kcProps.kcButtonLargeClass\n                                )}\n                                type=\"submit\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n            infoNode={msg(\"emailInstruction\")}\n        />\n    );\n});\n\nexport default LoginResetPassword;\n"],"names":["LoginResetPassword","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","url","realm","auth","msg","msgStr","React","displayMessage","headerNode","formNode","id","className","clsx","kcFormClass","action","loginAction","method","kcFormGroupClass","kcLabelWrapperClass","htmlFor","kcLabelClass","loginWithEmailAllowed","registrationEmailAsUsername","kcInputWrapperClass","type","name","kcInputClass","autoFocus","defaultValue","undefined","showUsername","attemptedUsername","kcFormSettingClass","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","infoNode"],"sourceRoot":""}