{"version":3,"file":"static/js/53.4537bdd7.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/UpdateUserProfile.tsx","../node_modules/keycloakify/src/lib/components/shared/UserProfileCommons.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { clsx } from \"../tools/clsx\";\nimport type { I18n } from \"../i18n\";\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\n\nexport type UpdateUserProfileProps = KcProps & {\n    kcContext: KcContextBase.UpdateUserProfile;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst UpdateUserProfile = memo((props: UpdateUserProfileProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { msg, msgStr } = i18n;\n\n    const { url, isAppInitiatedAction } = kcContext;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            headerNode={msg(\"loginProfileTitle\")}\n            formNode={\n                <form id=\"kc-update-profile-form\" className={clsx(kcProps.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...kcProps} />\n\n                    <div className={clsx(kcProps.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={clsx(kcProps.kcFormOptionsClass)}>\n                            <div className={clsx(kcProps.kcFormOptionsWrapperClass)}></div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormButtonsClass)}>\n                            {isAppInitiatedAction ? (\n                                <>\n                                    <input\n                                        className={clsx(kcProps.kcButtonClass, kcProps.kcButtonPrimaryClass, kcProps.kcButtonLargeClass)}\n                                        type=\"submit\"\n                                        value={msgStr(\"doSubmit\")}\n                                    />\n                                    <button\n                                        className={clsx(kcProps.kcButtonClass, kcProps.kcButtonDefaultClass, kcProps.kcButtonLargeClass)}\n                                        type=\"submit\"\n                                        name=\"cancel-aia\"\n                                        value=\"true\"\n                                        formNoValidate\n                                    >\n                                        {msg(\"doCancel\")}\n                                    </button>\n                                </>\n                            ) : (\n                                <input\n                                    className={clsx(\n                                        kcProps.kcButtonClass,\n                                        kcProps.kcButtonPrimaryClass,\n                                        kcProps.kcButtonBlockClass,\n                                        kcProps.kcButtonLargeClass\n                                    )}\n                                    type=\"submit\"\n                                    defaultValue={msgStr(\"doSubmit\")}\n                                    disabled={!isFomSubmittable}\n                                />\n                            )}\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default UpdateUserProfile;\n","import React, { memo, useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { clsx } from \"../../tools/clsx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18n } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    i18n: I18n;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport const UserProfileFormFields = memo(\n    ({ kcContext, onIsFormSubmittableValueChange, i18n, BeforeField, AfterField, ...props }: UserProfileFormFieldsProps) => {\n        const { advancedMsg } = i18n;\n\n        const {\n            formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n            formValidationReducer,\n            attributesWithPassword\n        } = useFormValidationSlice({\n            kcContext,\n            i18n\n        });\n\n        useEffect(() => {\n            onIsFormSubmittableValueChange(isFormSubmittable);\n        }, [isFormSubmittable]);\n\n        const onChangeFactory = useCallbackFactory(\n            (\n                [name]: [string],\n                [\n                    {\n                        target: { value }\n                    }\n                ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n            ) =>\n                formValidationReducer({\n                    \"action\": \"update value\",\n                    name,\n                    \"newValue\": value\n                })\n        );\n\n        const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n            formValidationReducer({\n                \"action\": \"focus lost\",\n                name\n            })\n        );\n\n        let currentGroup = \"\";\n\n        return (\n            <>\n                {attributesWithPassword.map((attribute, i) => {\n                    const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                    const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                    const formGroupClassName = clsx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                    return (\n                        <Fragment key={i}>\n                            {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                                <div className={formGroupClassName}>\n                                    <div className={clsx(props.kcContentWrapperClass)}>\n                                        <label id={`header-${group}`} className={clsx(props.kcFormGroupHeader)}>\n                                            {advancedMsg(groupDisplayHeader) || currentGroup}\n                                        </label>\n                                    </div>\n                                    {groupDisplayDescription !== \"\" && (\n                                        <div className={clsx(props.kcLabelWrapperClass)}>\n                                            <label id={`description-${group}`} className={`${clsx(props.kcLabelClass)}`}>\n                                                {advancedMsg(groupDisplayDescription)}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {BeforeField && <BeforeField attribute={attribute} />}\n\n                            <div className={formGroupClassName}>\n                                <div className={clsx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor={attribute.name} className={clsx(props.kcLabelClass)}>\n                                        {advancedMsg(attribute.displayName ?? \"\")}\n                                    </label>\n                                    {attribute.required && <>*</>}\n                                </div>\n                                <div className={clsx(props.kcInputWrapperClass)}>\n                                    {(() => {\n                                        const { options } = attribute.validators;\n\n                                        if (options !== undefined) {\n                                            return (\n                                                <select\n                                                    id={attribute.name}\n                                                    name={attribute.name}\n                                                    onChange={onChangeFactory(attribute.name)}\n                                                    onBlur={onBlurFactory(attribute.name)}\n                                                    value={value}\n                                                >\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            );\n                                        }\n\n                                        return (\n                                            <input\n                                                type={(() => {\n                                                    switch (attribute.name) {\n                                                        case \"password-confirm\":\n                                                        case \"password\":\n                                                            return \"password\";\n                                                        default:\n                                                            return \"text\";\n                                                    }\n                                                })()}\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                value={value}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                className={clsx(props.kcInputClass)}\n                                                aria-invalid={displayableErrors.length !== 0}\n                                                disabled={attribute.readOnly}\n                                                autoComplete={attribute.autocomplete}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                            />\n                                        );\n                                    })()}\n                                    {displayableErrors.length !== 0 &&\n                                        (() => {\n                                            const divId = `input-error-${attribute.name}`;\n\n                                            return (\n                                                <>\n                                                    <style>{`#${divId} > span: { display: block; }`}</style>\n                                                    <span\n                                                        id={divId}\n                                                        className={clsx(props.kcInputErrorMessageClass)}\n                                                        style={{\n                                                            \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                        }}\n                                                        aria-live=\"polite\"\n                                                    >\n                                                        {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                    </span>\n                                                </>\n                                            );\n                                        })()}\n                                </div>\n                            </div>\n\n                            {AfterField && <AfterField attribute={attribute} />}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n);\n"],"names":["UpdateUserProfile","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","msg","msgStr","url","isAppInitiatedAction","useState","isFomSubmittable","setIsFomSubmittable","React","headerNode","formNode","id","className","clsx","kcFormClass","action","loginAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","kcFormGroupClass","kcFormOptionsClass","kcFormOptionsWrapperClass","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonLargeClass","type","value","kcButtonDefaultClass","name","formNoValidate","kcButtonBlockClass","defaultValue","disabled","_a","BeforeField","AfterField","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","useEffect","onChangeFactory","useCallbackFactory","target","onBlurFactory","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","kcFormGroupErrorClass","Fragment","key","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","kcInputWrapperClass","options","validators","undefined","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","divId","kcInputErrorMessageClass","style","errorMessage"],"sourceRoot":""}