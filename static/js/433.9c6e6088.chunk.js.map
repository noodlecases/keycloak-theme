{"version":3,"file":"static/js/433.9c6e6088.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/LoginUsername.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { clsx } from \"../tools/clsx\";\nimport { useConstCallback } from \"powerhooks/useConstCallback\";\nimport type { FormEventHandler } from \"react\";\nimport type { I18n } from \"../i18n\";\n\nexport type LoginUsernameProps = KcProps & {\n    kcContext: KcContextBase.LoginUsername;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst LoginUsername = memo((props: LoginUsernameProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { social, realm, url, usernameHidden, login, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            formNode={\n                <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && kcProps.kcContentWrapperClass)}>\n                    <div\n                        id=\"kc-form-wrapper\"\n                        className={clsx(\n                            realm.password && social.providers && [kcProps.kcFormSocialAccountContentClass, kcProps.kcFormSocialAccountClass]\n                        )}\n                    >\n                        {realm.password && (\n                            <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                                <div className={clsx(kcProps.kcFormGroupClass)}>\n                                    {!usernameHidden &&\n                                        (() => {\n                                            const label = !realm.loginWithEmailAllowed\n                                                ? \"username\"\n                                                : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                            const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                            return (\n                                                <>\n                                                    <label htmlFor={autoCompleteHelper} className={clsx(kcProps.kcLabelClass)}>\n                                                        {msg(label)}\n                                                    </label>\n                                                    <input\n                                                        tabIndex={1}\n                                                        id={autoCompleteHelper}\n                                                        className={clsx(kcProps.kcInputClass)}\n                                                        //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                        //the browser how to pre fill the form but before submit we put it back\n                                                        //to username because it is what keycloak expects.\n                                                        name={autoCompleteHelper}\n                                                        defaultValue={login.username ?? \"\"}\n                                                        type=\"text\"\n                                                        autoFocus={true}\n                                                        autoComplete=\"off\"\n                                                    />\n                                                </>\n                                            );\n                                        })()}\n                                </div>\n                                <div className={clsx(kcProps.kcFormGroupClass, kcProps.kcFormSettingClass)}>\n                                    <div id=\"kc-form-options\">\n                                        {realm.rememberMe && !usernameHidden && (\n                                            <div className=\"checkbox\">\n                                                <label>\n                                                    <input\n                                                        tabIndex={3}\n                                                        id=\"rememberMe\"\n                                                        name=\"rememberMe\"\n                                                        type=\"checkbox\"\n                                                        {...(login.rememberMe\n                                                            ? {\n                                                                  \"checked\": true\n                                                              }\n                                                            : {})}\n                                                    />\n                                                    {msg(\"rememberMe\")}\n                                                </label>\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                                <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormGroupClass)}>\n                                    <input\n                                        tabIndex={4}\n                                        className={clsx(\n                                            kcProps.kcButtonClass,\n                                            kcProps.kcButtonPrimaryClass,\n                                            kcProps.kcButtonBlockClass,\n                                            kcProps.kcButtonLargeClass\n                                        )}\n                                        name=\"login\"\n                                        id=\"kc-login\"\n                                        type=\"submit\"\n                                        value={msgStr(\"doLogIn\")}\n                                        disabled={isLoginButtonDisabled}\n                                    />\n                                </div>\n                            </form>\n                        )}\n                    </div>\n                    {realm.password && social.providers !== undefined && (\n                        <div id=\"kc-social-providers\" className={clsx(kcProps.kcFormSocialAccountContentClass, kcProps.kcFormSocialAccountClass)}>\n                            <ul\n                                className={clsx(\n                                    kcProps.kcFormSocialAccountListClass,\n                                    social.providers.length > 4 && kcProps.kcFormSocialAccountDoubleListClass\n                                )}\n                            >\n                                {social.providers.map(p => (\n                                    <li key={p.providerId} className={clsx(kcProps.kcFormSocialAccountListLinkClass)}>\n                                        <a href={p.loginUrl} id={`zocial-${p.alias}`} className={clsx(\"zocial\", p.providerId)}>\n                                            <span>{p.displayName}</span>\n                                        </a>\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n                </div>\n            }\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        />\n    );\n});\n\nexport default LoginUsername;\n"],"names":["LoginUsername","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","social","realm","url","usernameHidden","login","registrationDisabled","msg","msgStr","useState","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","preventDefault","formElement","target","querySelector","setAttribute","submit","React","displayInfo","displayWide","password","undefined","providers","headerNode","formNode","id","className","clsx","kcContentWrapperClass","kcFormSocialAccountContentClass","kcFormSocialAccountClass","action","loginAction","method","kcFormGroupClass","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","htmlFor","kcLabelClass","tabIndex","kcInputClass","name","defaultValue","username","type","autoFocus","autoComplete","kcFormSettingClass","rememberMe","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","disabled","kcFormSocialAccountListClass","length","kcFormSocialAccountDoubleListClass","map","p","key","providerId","kcFormSocialAccountListLinkClass","href","loginUrl","alias","displayName","infoNode","registrationAllowed","registrationUrl"],"sourceRoot":""}