{"version":3,"file":"static/js/332.cf9e77f0.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/IdpReviewUserProfile.tsx","../node_modules/keycloakify/src/lib/components/shared/UserProfileCommons.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { clsx } from \"../tools/clsx\";\nimport type { I18n } from \"../i18n\";\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\n\nexport type IdpReviewUserProfileProps = KcProps & {\n    kcContext: KcContextBase.IdpReviewUserProfile;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst IdpReviewUserProfile = memo((props: IdpReviewUserProfileProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { msg, msgStr } = i18n;\n\n    const { url } = kcContext;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            headerNode={msg(\"loginIdpReviewProfileTitle\")}\n            formNode={\n                <form id=\"kc-idp-review-profile-form\" className={clsx(kcProps.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...kcProps} />\n\n                    <div className={clsx(kcProps.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={clsx(kcProps.kcFormOptionsClass)}>\n                            <div className={clsx(kcProps.kcFormOptionsWrapperClass)} />\n                        </div>\n                        <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormButtonsClass)}>\n                            <input\n                                className={clsx(\n                                    kcProps.kcButtonClass,\n                                    kcProps.kcButtonPrimaryClass,\n                                    kcProps.kcButtonBlockClass,\n                                    kcProps.kcButtonLargeClass\n                                )}\n                                type=\"submit\"\n                                value={msgStr(\"doSubmit\")}\n                                disabled={!isFomSubmittable}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default IdpReviewUserProfile;\n","import React, { memo, useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { clsx } from \"../../tools/clsx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18n } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    i18n: I18n;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport const UserProfileFormFields = memo(\n    ({ kcContext, onIsFormSubmittableValueChange, i18n, BeforeField, AfterField, ...props }: UserProfileFormFieldsProps) => {\n        const { advancedMsg } = i18n;\n\n        const {\n            formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n            formValidationReducer,\n            attributesWithPassword\n        } = useFormValidationSlice({\n            kcContext,\n            i18n\n        });\n\n        useEffect(() => {\n            onIsFormSubmittableValueChange(isFormSubmittable);\n        }, [isFormSubmittable]);\n\n        const onChangeFactory = useCallbackFactory(\n            (\n                [name]: [string],\n                [\n                    {\n                        target: { value }\n                    }\n                ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n            ) =>\n                formValidationReducer({\n                    \"action\": \"update value\",\n                    name,\n                    \"newValue\": value\n                })\n        );\n\n        const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n            formValidationReducer({\n                \"action\": \"focus lost\",\n                name\n            })\n        );\n\n        let currentGroup = \"\";\n\n        return (\n            <>\n                {attributesWithPassword.map((attribute, i) => {\n                    const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                    const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                    const formGroupClassName = clsx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                    return (\n                        <Fragment key={i}>\n                            {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                                <div className={formGroupClassName}>\n                                    <div className={clsx(props.kcContentWrapperClass)}>\n                                        <label id={`header-${group}`} className={clsx(props.kcFormGroupHeader)}>\n                                            {advancedMsg(groupDisplayHeader) || currentGroup}\n                                        </label>\n                                    </div>\n                                    {groupDisplayDescription !== \"\" && (\n                                        <div className={clsx(props.kcLabelWrapperClass)}>\n                                            <label id={`description-${group}`} className={`${clsx(props.kcLabelClass)}`}>\n                                                {advancedMsg(groupDisplayDescription)}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {BeforeField && <BeforeField attribute={attribute} />}\n\n                            <div className={formGroupClassName}>\n                                <div className={clsx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor={attribute.name} className={clsx(props.kcLabelClass)}>\n                                        {advancedMsg(attribute.displayName ?? \"\")}\n                                    </label>\n                                    {attribute.required && <>*</>}\n                                </div>\n                                <div className={clsx(props.kcInputWrapperClass)}>\n                                    {(() => {\n                                        const { options } = attribute.validators;\n\n                                        if (options !== undefined) {\n                                            return (\n                                                <select\n                                                    id={attribute.name}\n                                                    name={attribute.name}\n                                                    onChange={onChangeFactory(attribute.name)}\n                                                    onBlur={onBlurFactory(attribute.name)}\n                                                    value={value}\n                                                >\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            );\n                                        }\n\n                                        return (\n                                            <input\n                                                type={(() => {\n                                                    switch (attribute.name) {\n                                                        case \"password-confirm\":\n                                                        case \"password\":\n                                                            return \"password\";\n                                                        default:\n                                                            return \"text\";\n                                                    }\n                                                })()}\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                value={value}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                className={clsx(props.kcInputClass)}\n                                                aria-invalid={displayableErrors.length !== 0}\n                                                disabled={attribute.readOnly}\n                                                autoComplete={attribute.autocomplete}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                            />\n                                        );\n                                    })()}\n                                    {displayableErrors.length !== 0 &&\n                                        (() => {\n                                            const divId = `input-error-${attribute.name}`;\n\n                                            return (\n                                                <>\n                                                    <style>{`#${divId} > span: { display: block; }`}</style>\n                                                    <span\n                                                        id={divId}\n                                                        className={clsx(props.kcInputErrorMessageClass)}\n                                                        style={{\n                                                            \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                        }}\n                                                        aria-live=\"polite\"\n                                                    >\n                                                        {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                    </span>\n                                                </>\n                                            );\n                                        })()}\n                                </div>\n                            </div>\n\n                            {AfterField && <AfterField attribute={attribute} />}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n);\n"],"names":["IdpReviewUserProfile","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","msg","msgStr","url","useState","isFomSubmittable","setIsFomSubmittable","React","headerNode","formNode","id","className","clsx","kcFormClass","action","loginAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","kcFormGroupClass","kcFormOptionsClass","kcFormOptionsWrapperClass","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","type","value","disabled","_a","BeforeField","AfterField","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","useEffect","onChangeFactory","useCallbackFactory","name","target","onBlurFactory","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","kcFormGroupErrorClass","Fragment","key","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","kcInputWrapperClass","options","validators","undefined","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","divId","kcInputErrorMessageClass","style","errorMessage"],"sourceRoot":""}