{"version":3,"file":"static/js/114.cebb93ed.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/LoginConfigTotp.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { clsx } from \"../tools/clsx\";\nimport type { I18n } from \"../i18n\";\n\nexport type LoginConfigTotpProps = KcProps & {\n    kcContext: KcContextBase.LoginConfigTotp;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst LoginConfigTotp = memo((props: LoginConfigTotpProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { url, isAppInitiatedAction, totp, mode, messagesPerField } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const algToKeyUriAlg: Record<KcContextBase.LoginConfigTotp[\"totp\"][\"policy\"][\"algorithm\"], string> = {\n        \"HmacSHA1\": \"SHA1\",\n        \"HmacSHA256\": \"SHA256\",\n        \"HmacSHA512\": \"SHA512\"\n    };\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            headerNode={msg(\"loginTotpTitle\")}\n            formNode={\n                <>\n                    <ol id=\"kc-totp-settings\">\n                        <li>\n                            <p>{msg(\"loginTotpStep1\")}</p>\n\n                            <ul id=\"kc-totp-supported-apps\">\n                                {totp.policy.supportedApplications.map(app => (\n                                    <li>{app}</li>\n                                ))}\n                            </ul>\n                        </li>\n\n                        {mode && mode == \"manual\" ? (\n                            <>\n                                <li>\n                                    <p>{msg(\"loginTotpManualStep2\")}</p>\n                                    <p>\n                                        <span id=\"kc-totp-secret-key\">{totp.totpSecretEncoded}</span>\n                                    </p>\n                                    <p>\n                                        <a href={totp.qrUrl} id=\"mode-barcode\">\n                                            {msg(\"loginTotpScanBarcode\")}\n                                        </a>\n                                    </p>\n                                </li>\n                                <li>\n                                    <p>{msg(\"loginTotpManualStep3\")}</p>\n                                    <p>\n                                        <ul>\n                                            <li id=\"kc-totp-type\">\n                                                {msg(\"loginTotpType\")}: {msg(`loginTotp.${totp.policy.type}`)}\n                                            </li>\n                                            <li id=\"kc-totp-algorithm\">\n                                                {msg(\"loginTotpAlgorithm\")}: {algToKeyUriAlg?.[totp.policy.algorithm] ?? totp.policy.algorithm}\n                                            </li>\n                                            <li id=\"kc-totp-digits\">\n                                                {msg(\"loginTotpDigits\")}: {totp.policy.digits}\n                                            </li>\n                                            {totp.policy.type === \"totp\" ? (\n                                                <li id=\"kc-totp-period\">\n                                                    {msg(\"loginTotpInterval\")}: {totp.policy.period}\n                                                </li>\n                                            ) : (\n                                                <li id=\"kc-totp-counter\">\n                                                    {msg(\"loginTotpCounter\")}: {totp.policy.initialCounter}\n                                                </li>\n                                            )}\n                                        </ul>\n                                    </p>\n                                </li>\n                            </>\n                        ) : (\n                            <li>\n                                <p>{msg(\"loginTotpStep2\")}</p>\n                                <img id=\"kc-totp-secret-qr-code\" src={`data:image/png;base64, ${totp.totpSecretQrCode}`} alt=\"Figure: Barcode\" />\n                                <br />\n                                <p>\n                                    <a href={totp.manualUrl} id=\"mode-manual\">\n                                        {msg(\"loginTotpUnableToScan\")}\n                                    </a>\n                                </p>\n                            </li>\n                        )}\n                        <li>\n                            <p>{msg(\"loginTotpStep3\")}</p>\n                            <p>{msg(\"loginTotpStep3DeviceName\")}</p>\n                        </li>\n                    </ol>\n\n                    <form action={url.loginAction} className={clsx(kcProps.kcFormClass)} id=\"kc-totp-settings-form\" method=\"post\">\n                        <div className={clsx(kcProps.kcFormGroupClass)}>\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                <label htmlFor=\"totp\" className={clsx(kcProps.kcLabelClass)}>\n                                    {msg(\"authenticatorCode\")}\n                                </label>{\" \"}\n                                <span className=\"required\">*</span>\n                            </div>\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"totp\"\n                                    name=\"totp\"\n                                    autoComplete=\"off\"\n                                    className={clsx(kcProps.kcInputClass)}\n                                    aria-invalid={messagesPerField.existsError(\"totp\")}\n                                />\n\n                                {messagesPerField.existsError(\"totp\") && (\n                                    <span id=\"input-error-otp-code\" className={clsx(kcProps.kcInputErrorMessageClass)} aria-live=\"polite\">\n                                        {messagesPerField.get(\"totp\")}\n                                    </span>\n                                )}\n                            </div>\n                            <input type=\"hidden\" id=\"totpSecret\" name=\"totpSecret\" value={totp.totpSecret} />\n                            {mode && <input type=\"hidden\" id=\"mode\" value={mode} />}\n                        </div>\n\n                        <div className={clsx(kcProps.kcFormGroupClass)}>\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                <label htmlFor=\"userLabel\" className={clsx(kcProps.kcLabelClass)}>\n                                    {msg(\"loginTotpDeviceName\")}\n                                </label>{\" \"}\n                                {totp.otpCredentials.length >= 1 && <span className=\"required\">*</span>}\n                            </div>\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"userLabel\"\n                                    name=\"userLabel\"\n                                    autoComplete=\"off\"\n                                    className={clsx(kcProps.kcInputClass)}\n                                    aria-invalid={messagesPerField.existsError(\"userLabel\")}\n                                />\n                                {messagesPerField.existsError(\"userLabel\") && (\n                                    <span id=\"input-error-otp-label\" className={clsx(kcProps.kcInputErrorMessageClass)} aria-live=\"polite\">\n                                        {messagesPerField.get(\"userLabel\")}\n                                    </span>\n                                )}\n                            </div>\n                        </div>\n\n                        {isAppInitiatedAction ? (\n                            <>\n                                <input\n                                    type=\"submit\"\n                                    className={clsx(kcProps.kcButtonClass, kcProps.kcButtonPrimaryClass, kcProps.kcButtonLargeClass)}\n                                    id=\"saveTOTPBtn\"\n                                    value={msgStr(\"doSubmit\")}\n                                />\n                                <button\n                                    type=\"submit\"\n                                    className={clsx(\n                                        kcProps.kcButtonClass,\n                                        kcProps.kcButtonDefaultClass,\n                                        kcProps.kcButtonLargeClass,\n                                        kcProps.kcButtonLargeClass\n                                    )}\n                                    id=\"cancelTOTPBtn\"\n                                    name=\"cancel-aia\"\n                                    value=\"true\"\n                                >\n                                    ${msg(\"doCancel\")}\n                                </button>\n                            </>\n                        ) : (\n                            <input\n                                type=\"submit\"\n                                className={clsx(kcProps.kcButtonClass, kcProps.kcButtonPrimaryClass, kcProps.kcButtonLargeClass)}\n                                id=\"saveTOTPBtn\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                        )}\n                    </form>\n                </>\n            }\n        />\n    );\n});\n\nexport default LoginConfigTotp;\n"],"names":["LoginConfigTotp","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","url","isAppInitiatedAction","totp","mode","messagesPerField","msg","msgStr","algToKeyUriAlg","React","headerNode","formNode","id","policy","supportedApplications","map","app","totpSecretEncoded","href","qrUrl","type","algorithm","digits","period","initialCounter","src","totpSecretQrCode","alt","manualUrl","action","loginAction","className","clsx","kcFormClass","method","kcFormGroupClass","kcInputWrapperClass","htmlFor","kcLabelClass","name","autoComplete","kcInputClass","existsError","kcInputErrorMessageClass","get","value","totpSecret","otpCredentials","length","kcButtonClass","kcButtonPrimaryClass","kcButtonLargeClass","kcButtonDefaultClass"],"sourceRoot":""}